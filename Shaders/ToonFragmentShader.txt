#version 400

in vec2 Texcoord;
in vec3 position_eye, normal_eye;
uniform mat4 view;
uniform sampler2D texture_for_shader;
uniform int no_specular;
uniform int no_diffuse;
uniform int full_ambient;

// fixed point light properties

vec3 light_position_world = vec3 (0.0, 1.0, 0.0); // was 0, 20, 2
vec3 Ls = vec3 (1.0, 1.0, 1.0); // white specular colour
vec3 Ld = vec3 (0.5, 0.5, 0.5); // dull white diffuse light colour
vec3 La = vec3 (1.0, 1.0, 1.0); // white ambient colour

// surface reflectance
vec3 Ks = vec3 (1.0, 1.0, 1.0); // fully reflect specular light
vec3 Kd = vec3 (0.5, 0.5, 0.7); // blueish grey surface reflectance
vec3 Ka = vec3 (0.5, 0.5, 0.5); // partial reflectance of ambient
float specular_exponent = 20.0; // specular 'power'

out vec4 fragment_colour;  // Output color of fragment

void main () {
	if (full_ambient == 1){
		Ka = vec3(1.0, 1.0, 1.0);
	}
	vec3 lookDirection = vec3(view[2][0], view[2][1], view[2][2]);
	vec3 normal_eye2 = normalize(normal_eye);
	// Texture vector
	vec4 texture_vec = texture(texture_for_shader, Texcoord);  

	// ambient intensity
	vec3 Ia = La * Ka;
	
	// diffuse intensity
	// raise light position to eye space
	vec3 light_position_eye = vec3 (view * vec4(light_position_world, 1.0));
	vec3 distance_to_light_eye = light_position_eye - position_eye;
	vec3 direction_to_light_eye = normalize (distance_to_light_eye);
	float dot_prod = dot (direction_to_light_eye, normal_eye2);
	//dot_prod = max (dot_prod, 0.0);	
	if(dot_prod > 0.6){
		dot_prod = 1.0;
	}
	else if(dot_prod > 0.2){
		dot_prod = 0.75;
	}
	else if(dot_prod > -0.2){
		dot_prod = 0.5;
	}
	else if(dot_prod > -0.6){
		dot_prod = 0.25;
	}
	else{
		dot_prod = 0.0;
	}
	if(no_diffuse == 1){
		dot_prod = 0.0;
	} 

	vec3 Id = Ld * Kd * dot_prod; // final diffuse intensity

	//specular intensity
	vec3 reflection_eye = reflect (-direction_to_light_eye, normal_eye2);
	vec3 surface_to_viewer_eye = normalize (-position_eye);
	float dot_prod_specular = dot (reflection_eye, surface_to_viewer_eye);
	if(dot_prod_specular > 0.95){
		dot_prod_specular = 1.00;
	}
	else{
		dot_prod_specular = 0.0;
	}
	if(no_specular == 1){
		dot_prod_specular = 0.0;
	} 
	dot_prod_specular = max (dot_prod_specular, 0.0);

	float specular_factor = pow (dot_prod_specular, specular_exponent);
	vec3 Is = Ls * Ks * specular_factor; // final specular intensity	
	
	// final colour    
	vec4 frag_colour = vec4 (Is + Id + Ia, 1.0);  // linear combination of ambient, diffuse and specular
	fragment_colour	= frag_colour * texture_vec;
}